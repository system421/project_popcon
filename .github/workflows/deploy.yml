name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때마다 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties

    - name: Set up JDK 11
      uses: actions/setup-java@v1

      with:
        java-version: '11'


    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download Docker image from Docker Hub
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest

    - name: Deploy to Elastic Beanstalk
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/my-springboot-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-springboot-app:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-springboot-app:latest
        eb init -p docker my-springboot-app --region ${{ secrets.AWS_REGION }}
        eb create POPCONDOCKER-env
        eb deploy

    - name: Upload to S3 (Optional, if you need to upload some artifacts to S3)
      run: |
        aws s3 cp some-artifact.zip s3://popcondockerbucket/ --region ${{ secrets.AWS_REGION }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
